public class BSTree extends BTreePrinter{
    Node root;

    public static Node find(Node node, int search_key){ //ใช้ recursionในการหา หากค่าของ searchkey น้อยกว่า ค่าของ nodeนั้น จะไปหาทางซ้ายของ node นั้น เเละถ้าหากมากกว่า จะไปหาทางขวาของ node นั้นเเทน เเล้ววนไปเรื่อยๆ จนกว่า ค่าจะตรงกัน ถ้าตรงจะเเสดงออกมา ถ้าหาไม่เจอจะเเสดง Node not found!!!
        if (node == null) {
            System.out.println("Node not found!!!");
            return null;
        }
        if (node.key == search_key) {
            return node;
        } else if (search_key < node.key) {
            return find(node.left, search_key);
        } else {
            return find(node.right, search_key);
        }
    }

    public static Node findMin(Node node){ //ใช้ recursionในการหา โดยใช้ค้นไปทางด้านซ้ายสุดของต้นไม้ เพราะว่าเป็น binary search tree เเล้ว(จัดเรียงค่า) ถ้าเจอก็เเสดงค่า node นั้นออกมา
        if (node == null) {
            return null;
        }
        if (node.left != null) {
            return findMin(node.left);
        } else {
            return node;
        }
    }

    public static Node findMax(Node node){ //ใช้ recursionในการหา โดยใช้ค้นไปทางด้านขวาสุดของต้นไม้ เพราะว่าเป็น binary search tree เเล้ว(จัดเรียงค่า)ถ้าเจอก็เเสดงค่า node นั้นออกมา
        if (node == null) {
            return null;
        }
        if (node.right != null) {
            return findMax(node.right);
        } else {
            return node;
        }
    }

    public void insert(int key) {
        if (root == null) {
            root = new Node(key);
            return;
        }
        insert(root, key);
    }

    public static void insert(Node node, int key) {
        if (key == node.key) {
            System.out.println("Duplicated key:" + key);
        }else if (key < node.key) {//Go left
            if (node.left == null) {
                node.left = new Node(key);
                node.left.parent = node;
            }else {
                insert(node.left, key);
            }
        }else{  // Go right
            if (node.right == null) {
                node.right = new Node(key);
                node.right.parent = node;
            }else {
                insert(node.right, key);
            }
        }
    }
    
    public void delete(int key) { //ลบค่า keyที่ต้องการใน tree 
        if (root == null) { // ถ้าไม่มี tree ให้แจ้ง error empty tree
            System.out.println("Empty Tree!!!");
            return;
        }
        Node found = find(root, key); // หาnodeที่ต้องการลบ
        if (found == null) { //หา node ที่ต้องการลบไม่เจอให้แจ้ง key not found
            System.out.println("Key not found!!!");
            return;
        }
        if (found == root) {
            if (root.left == null && root.right == null) root = null; //ถ้าทั้งต้นมีเเค่ node เดียวไม่มีลูกก็ลบ root เลย
            else if (root.left != null && root.right == null) { // ถ้ามีแค่ลูกทางซ้ายก็ promote ลูกทางซ้ายเป็น root
                root = root.left; 
                root.parent = null;
            } else if (root.left == null && root.right != null) { // ถ้ามีแค่ลูกทางขวาก็ promote ลูกทางขวาเป็น root
                root = root.right;
                root.parent = null;
            } else { // ถ้ามีลูกทั้งซ้ายและขวาให้ findmin ของ right sub-tree แล้ว promote เป็น root
                Node rightMin = findMin(root.right);
                if (rightMin.parent.right == rightMin) {
                    rightMin.parent.right = null;
                } else if (rightMin.parent.left == rightMin) {
                    rightMin.parent.left = null;
                }
                rightMin.parent = null;
                rightMin.right = root.right;
                rightMin.left = root.left;
                if (root.right != null) root.right.parent = rightMin;
                root.left.parent = rightMin;
                root = rightMin;
            }
        } else { // ในกรณีที่ node ที่ต้องการลบไม่ใช่root
            delete(found);
        }
    }
    
    public static void delete(Node node){
        // There should be 7 cases here
        if (node.left == null && node.right == null) { // if don't have any child
            if (node.parent.left == node) { // if is left child
                node.parent.left = null;
            } else if (node.parent.right == node) { // if is right child
                node.parent.right = null;
            }
            node.parent = null;
        } else if (node.left != null && node.right == null) { // if have left child
            if (node.parent.left == node) { // if is left child
                node.parent.left = node.left; // 
                node.left.parent = node.parent;
            } else if (node.parent.right == node) { // if is right child
                node.parent.right = node.left;
                node.left.parent = node.parent;
            }
        } else if (node.left == null && node.right != null) { // if have right child
            if (node.parent.left == node) { // if is left child
                node.parent.left = node.right;
                node.right.parent = node.parent;
            } else if (node.parent.right == node) { // if is right child
                node.parent.right = node.right;
                node.right.parent = node.parent;
            }
        } else { // find min of right sub-tree and replace node with min
            Node rightMin = findMin(node.right);
            if (node.parent.right == node) node.parent.right = rightMin;
            else if (node.parent.left == node) node.parent.left = rightMin;
            if (rightMin.parent.right == rightMin) rightMin.parent.right = null;
            else if (rightMin.parent.left == rightMin) rightMin.parent.left = null;
            rightMin.parent = node.parent;
            rightMin.right = node.right;
            rightMin.left = node.left;
            if (node.right != null) node.right.parent = rightMin;
            node.left.parent = rightMin;
        }
    }
    
    public static boolean isMergeable(Node r1, Node r2){
        return findMax(r1).key < findMin(r2).key;// Fix this
    }

    public static Node mergeWithRoot(Node r1, Node r2, Node t){
        if (isMergeable(r1, r2)) {
            t.left = r1;
            t.left.parent = t;
            t.right = r2;
            t.right.parent = t;
            return t;
        } else {
            System.out.println("All nodes in T1 must be smaller than all nodes from T2");
            return null;
        }
    }
    
    public void merge(BSTree tree2){
        if (isMergeable(this.root, tree2.root)){
            Node max = findMax(this.root);
            delete(max);
            this.root = mergeWithRoot(this.root, tree2.root, max);
        }else{
            System.out.println("All nodes in T1 must be smaller than all nodes from T2");
        }
    }

    // This function is complete, no need to edit
    public void printTree() {
        if (root == null) {
            System.out.println("Empty tree!!!");
        } else {
            super.printTree(root);
        }
    }
}